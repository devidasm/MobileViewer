/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.imebra.dicom;

public class Image {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Image(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Image obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        imebraJNI.delete_Image(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Image() {
    this(imebraJNI.new_Image__SWIG_0(), true);
  }

  public Image(Image right) {
    this(imebraJNI.new_Image__SWIG_1(Image.getCPtr(right), right), true);
  }

  public Image assign(Image right) {
    return new Image(imebraJNI.Image_assign(swigCPtr, this, Image.getCPtr(right), right), false);
  }

  public DataHandler create(int sizeX, int sizeY, Image.bitDepth depth, String colorSpace, int highBit) {
    return new DataHandler(imebraJNI.Image_create(swigCPtr, this, sizeX, sizeY, depth.swigValue(), colorSpace, highBit), true);
  }

  public void setHighBit(int highBit) {
    imebraJNI.Image_setHighBit(swigCPtr, this, highBit);
  }

  public double getSizeMmY() {
    return imebraJNI.Image_getSizeMmY(swigCPtr, this);
  }

  public double getSizeMmX() {
    return imebraJNI.Image_getSizeMmX(swigCPtr, this);
  }

  public void setSizeMm(double sizeX, double sizeY) {
    imebraJNI.Image_setSizeMm(swigCPtr, this, sizeX, sizeY);
  }

  public int getSizeX() {
    return imebraJNI.Image_getSizeX(swigCPtr, this);
  }

  public int getSizeY() {
    return imebraJNI.Image_getSizeY(swigCPtr, this);
  }

  public DataHandler getDataHandler(boolean bWrite) {
    return new DataHandler(imebraJNI.Image_getDataHandler(swigCPtr, this, bWrite), true);
  }

  public String getColorSpace() {
    return imebraJNI.Image_getColorSpace(swigCPtr, this);
  }

  public int getChannelsNumber() {
    return imebraJNI.Image_getChannelsNumber(swigCPtr, this);
  }

  public Image.bitDepth getDepth() {
    return Image.bitDepth.swigToEnum(imebraJNI.Image_getDepth(swigCPtr, this));
  }

  public int getHighBit() {
    return imebraJNI.Image_getHighBit(swigCPtr, this);
  }

  public final static class bitDepth {
    public final static Image.bitDepth depthU8 = new Image.bitDepth("depthU8", imebraJNI.Image_depthU8_get());
    public final static Image.bitDepth depthS8 = new Image.bitDepth("depthS8", imebraJNI.Image_depthS8_get());
    public final static Image.bitDepth depthU16 = new Image.bitDepth("depthU16", imebraJNI.Image_depthU16_get());
    public final static Image.bitDepth depthS16 = new Image.bitDepth("depthS16", imebraJNI.Image_depthS16_get());
    public final static Image.bitDepth depthU32 = new Image.bitDepth("depthU32", imebraJNI.Image_depthU32_get());
    public final static Image.bitDepth depthS32 = new Image.bitDepth("depthS32", imebraJNI.Image_depthS32_get());
    public final static Image.bitDepth endOfDepths = new Image.bitDepth("endOfDepths", imebraJNI.Image_endOfDepths_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static bitDepth swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + bitDepth.class + " with value " + swigValue);
    }

    private bitDepth(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private bitDepth(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private bitDepth(String swigName, bitDepth swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static bitDepth[] swigValues = { depthU8, depthS8, depthU16, depthS16, depthU32, depthS32, endOfDepths };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
