/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#include <string>


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#include "../imebra/project_files/library/imebra/include/imebra.h"
#include "dataSet_swig.h"
#include "baseStream_swig.h"
#include "stream_swig.h"
#include "streamReader_swig.h"
#include "codecFactory_swig.h"
#include "dicomDir_swig.h"
#include "dataHandler_swig.h"
#include "image_swig.h"
#include "transform_swig.h"
#include "transformsChain_swig.h"
#include "colorTransformsFactory_swig.h"
#include "modalityVOILUT_swig.h"
#include "VOILUT_swig.h"
#include "memory_swig.h"
#include "drawBitmap_swig.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1DataSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (DataSet *)new DataSet();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1DataSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataSet *arg1 = 0 ;
  DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (DataSet *)new DataSet((DataSet const &)*arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  DataSet *arg1 = (DataSet *) 0 ;
  DataSet *arg2 = 0 ;
  DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = *(DataSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (DataSet *) &(arg1)->operator =((DataSet const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1getImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  Image result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getImage(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Image **)&jresult = new Image((const Image &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1getSequenceItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  DataSet result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (arg1)->getSequenceItem(arg2,arg3,arg4,arg5);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DataSet **)&jresult = new DataSet((const DataSet &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1getSignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (int)(arg1)->getSignedLong(arg2,arg3,arg4,arg5);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1setSignedLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jstring jarg7) {
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  std::string arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  {
    try {
      (arg1)->setSignedLong(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1setSignedLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  {
    try {
      (arg1)->setSignedLong(arg2,arg3,arg4,arg5,arg6);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1getUnsignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (int)(arg1)->getUnsignedLong(arg2,arg3,arg4,arg5);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1setUnsignedLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jstring jarg7) {
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  std::string arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  {
    try {
      (arg1)->setUnsignedLong(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1setUnsignedLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  {
    try {
      (arg1)->setUnsignedLong(arg2,arg3,arg4,arg5,arg6);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1getDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jdouble jresult = 0 ;
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (double)(arg1)->getDouble(arg2,arg3,arg4,arg5);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1setDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jdouble jarg6, jstring jarg7) {
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  std::string arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  {
    try {
      (arg1)->setDouble(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1setDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jdouble jarg6) {
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->setDouble(arg2,arg3,arg4,arg5,arg6);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jstring jresult = 0 ;
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (arg1)->getString(arg2,arg3,arg4,arg5);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1setString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jstring jarg6, jstring jarg7) {
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::wstring arg6 ;
  std::string arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg6_pstr = jenv->GetStringChars(jarg6, 0);
  if (!arg6_pstr) return ;
  jsize arg6_len = jenv->GetStringLength(jarg6);
  if (arg6_len) {
    (&arg6)->reserve(arg6_len);
    for (jsize i = 0; i < arg6_len; ++i) {
      (&arg6)->push_back((wchar_t)arg6_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg6, arg6_pstr);
  
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  {
    try {
      (arg1)->setString(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1setString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jstring jarg6) {
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::wstring arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg6_pstr = jenv->GetStringChars(jarg6, 0);
  if (!arg6_pstr) return ;
  jsize arg6_len = jenv->GetStringLength(jarg6);
  if (arg6_len) {
    (&arg6)->reserve(arg6_len);
    for (jsize i = 0; i < arg6_len; ++i) {
      (&arg6)->push_back((wchar_t)arg6_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg6, arg6_pstr);
  
  {
    try {
      (arg1)->setString(arg2,arg3,arg4,arg5,arg6);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1getDefaultDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jstring jresult = 0 ;
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (arg1)->getDefaultDataType(arg2,arg3,arg4);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_dicom_imebraJNI_DataSet_1getDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jstring jresult = 0 ;
  DataSet *arg1 = (DataSet *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (arg1)->getDataType(arg2,arg3,arg4);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1DataSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataSet *arg1 = (DataSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataSet **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1BaseStream(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BaseStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (BaseStream *)new BaseStream();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(BaseStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1BaseStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BaseStream *arg1 = (BaseStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BaseStream **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1Stream_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Stream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Stream *)new Stream();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Stream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1Stream_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Stream *arg1 = 0 ;
  Stream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Stream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Stream const & reference is null");
    return 0;
  } 
  {
    try {
      result = (Stream *)new Stream((Stream const &)*arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Stream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_Stream_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Stream *arg1 = (Stream *) 0 ;
  Stream *arg2 = 0 ;
  Stream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Stream **)&jarg1; 
  arg2 = *(Stream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Stream const & reference is null");
    return 0;
  } 
  {
    try {
      result = (Stream *) &(arg1)->operator =((Stream const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Stream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_Stream_1openFileRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Stream *arg1 = (Stream *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Stream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      (arg1)->openFileRead((std::wstring const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_Stream_1openFileWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Stream *arg1 = (Stream *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Stream **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      (arg1)->openFileWrite((std::wstring const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1Stream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Stream *arg1 = (Stream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Stream **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1StreamReader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  BaseStream *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  StreamReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseStream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BaseStream const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (StreamReader *)new StreamReader((BaseStream const &)*arg1,arg2,arg3);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(StreamReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1StreamReader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  BaseStream *arg1 = 0 ;
  int arg2 ;
  StreamReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseStream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BaseStream const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (StreamReader *)new StreamReader((BaseStream const &)*arg1,arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(StreamReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1StreamReader_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BaseStream *arg1 = 0 ;
  StreamReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseStream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BaseStream const & reference is null");
    return 0;
  } 
  {
    try {
      result = (StreamReader *)new StreamReader((BaseStream const &)*arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(StreamReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1StreamReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StreamReader *arg1 = (StreamReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StreamReader **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_CodecFactory_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< StreamReader > arg1 ;
  int arg2 ;
  StreamReader *argp1 ;
  DataSet result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(StreamReader **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null StreamReader");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = CodecFactory::load(arg1,arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DataSet **)&jresult = new DataSet((const DataSet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1CodecFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CodecFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CodecFactory *)new CodecFactory();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(CodecFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1CodecFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CodecFactory *arg1 = (CodecFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CodecFactory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1DirectoryRecord_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DirectoryRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (DirectoryRecord *)new DirectoryRecord();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DirectoryRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1DirectoryRecord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DirectoryRecord *arg1 = 0 ;
  DirectoryRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DirectoryRecord **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DirectoryRecord const & reference is null");
    return 0;
  } 
  {
    try {
      result = (DirectoryRecord *)new DirectoryRecord((DirectoryRecord const &)*arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DirectoryRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DirectoryRecord_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  DirectoryRecord *arg2 = 0 ;
  DirectoryRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DirectoryRecord **)&jarg1; 
  arg2 = *(DirectoryRecord **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DirectoryRecord const & reference is null");
    return 0;
  } 
  {
    try {
      result = (DirectoryRecord *) &(arg1)->operator =((DirectoryRecord const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DirectoryRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DirectoryRecord_1getRecordDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  DataSet result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DirectoryRecord **)&jarg1; 
  {
    try {
      result = (arg1)->getRecordDataSet();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DataSet **)&jresult = new DataSet((const DataSet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DirectoryRecord_1getNextRecord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  DirectoryRecord result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DirectoryRecord **)&jarg1; 
  {
    try {
      result = (arg1)->getNextRecord();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DirectoryRecord **)&jresult = new DirectoryRecord((const DirectoryRecord &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DirectoryRecord_1getFirstChildRecord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  DirectoryRecord result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DirectoryRecord **)&jarg1; 
  {
    try {
      result = (arg1)->getFirstChildRecord();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DirectoryRecord **)&jresult = new DirectoryRecord((const DirectoryRecord &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DirectoryRecord_1getReferencedRecord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  DirectoryRecord result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DirectoryRecord **)&jarg1; 
  {
    try {
      result = (arg1)->getReferencedRecord();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DirectoryRecord **)&jresult = new DirectoryRecord((const DirectoryRecord &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DirectoryRecord_1setNextRecord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  DirectoryRecord *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DirectoryRecord **)&jarg1; 
  arg2 = *(DirectoryRecord **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DirectoryRecord const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setNextRecord((DirectoryRecord const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DirectoryRecord_1setFirstChildRecord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  DirectoryRecord *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DirectoryRecord **)&jarg1; 
  arg2 = *(DirectoryRecord **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DirectoryRecord const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setFirstChildRecord((DirectoryRecord const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DirectoryRecord_1setReferencedRecord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  DirectoryRecord *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DirectoryRecord **)&jarg1; 
  arg2 = *(DirectoryRecord **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DirectoryRecord const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setReferencedRecord((DirectoryRecord const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_dicom_imebraJNI_DirectoryRecord_1getFilePart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  int arg2 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DirectoryRecord **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getFilePart(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DirectoryRecord_1setFilePart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  int arg2 ;
  std::wstring *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DirectoryRecord **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try {
      (arg1)->setFilePart(arg2,(std::wstring const &)*arg3);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_dicom_imebraJNI_DirectoryRecord_1getTypeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DirectoryRecord **)&jarg1; 
  {
    try {
      result = (arg1)->getTypeString();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DirectoryRecord_1setTypeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DirectoryRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      (arg1)->setTypeString((std::wstring const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_dicom_imebraJNI_DirectoryRecord_1isNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DirectoryRecord **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isNull();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1DirectoryRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DirectoryRecord *arg1 = (DirectoryRecord *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DirectoryRecord **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1DicomDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataSet arg1 ;
  DataSet *argp1 ;
  DicomDir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(DataSet **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null DataSet");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (DicomDir *)new DicomDir(arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DicomDir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DicomDir_1getDirectoryDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DicomDir *arg1 = (DicomDir *) 0 ;
  DataSet result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DicomDir **)&jarg1; 
  {
    try {
      result = (arg1)->getDirectoryDataSet();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DataSet **)&jresult = new DataSet((const DataSet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DicomDir_1getNewRecord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DicomDir *arg1 = (DicomDir *) 0 ;
  DirectoryRecord result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DicomDir **)&jarg1; 
  {
    try {
      result = (arg1)->getNewRecord();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DirectoryRecord **)&jresult = new DirectoryRecord((const DirectoryRecord &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DicomDir_1getFirstRootRecord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DicomDir *arg1 = (DicomDir *) 0 ;
  DirectoryRecord result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DicomDir **)&jarg1; 
  {
    try {
      result = (arg1)->getFirstRootRecord();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DirectoryRecord **)&jresult = new DirectoryRecord((const DirectoryRecord &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DicomDir_1setFirstRootRecord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DicomDir *arg1 = (DicomDir *) 0 ;
  DirectoryRecord arg2 ;
  DirectoryRecord *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DicomDir **)&jarg1; 
  argp2 = *(DirectoryRecord **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null DirectoryRecord");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setFirstRootRecord(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DicomDir_1buildDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DicomDir *arg1 = (DicomDir *) 0 ;
  DataSet result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DicomDir **)&jarg1; 
  {
    try {
      result = (arg1)->buildDataSet();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DataSet **)&jresult = new DataSet((const DataSet &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1DicomDir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DicomDir *arg1 = (DicomDir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DicomDir **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1DataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataHandler *arg1 = 0 ;
  DataHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DataHandler const & reference is null");
    return 0;
  } 
  {
    try {
      result = (DataHandler *)new DataHandler((DataHandler const &)*arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DataHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  DataHandler *arg1 = (DataHandler *) 0 ;
  DataHandler *arg2 = 0 ;
  DataHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataHandler **)&jarg1; 
  arg2 = *(DataHandler **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DataHandler const & reference is null");
    return 0;
  } 
  {
    try {
      result = (DataHandler *) &(arg1)->operator =((DataHandler const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DataHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1pointerIsValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  DataHandler *arg1 = (DataHandler *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((DataHandler const *)arg1)->pointerIsValid(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DataHandler *arg1 = (DataHandler *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setSize(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataHandler *arg1 = (DataHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  {
    try {
      result = (int)((DataHandler const *)arg1)->getSize();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1getUnitSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DataHandler *arg1 = (DataHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  {
    try {
      result = (int)((DataHandler const *)arg1)->getUnitSize();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1getDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DataHandler *arg1 = (DataHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  {
    try {
      result = ((DataHandler const *)arg1)->getDataType();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1getPaddingByte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  DataHandler *arg1 = (DataHandler *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  {
    try {
      result = (char)((DataHandler const *)arg1)->getPaddingByte();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1getSignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  DataHandler *arg1 = (DataHandler *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((DataHandler const *)arg1)->getSignedLong(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1getUnsignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  DataHandler *arg1 = (DataHandler *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((DataHandler const *)arg1)->getUnsignedLong(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1getDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  DataHandler *arg1 = (DataHandler *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((DataHandler const *)arg1)->getDouble(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  DataHandler *arg1 = (DataHandler *) 0 ;
  int arg2 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((DataHandler const *)arg1)->getString(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1getDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jintArray jarg3, jintArray jarg4, jintArray jarg5, jintArray jarg6, jintArray jarg7, jintArray jarg8, jintArray jarg9, jintArray jarg10, jintArray jarg11) {
  DataHandler *arg1 = (DataHandler *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  int *arg10 = (int *) 0 ;
  int *arg11 = (int *) 0 ;
  jint *jarr3 ;
  jint *jarr4 ;
  jint *jarr5 ;
  jint *jarr6 ;
  jint *jarr7 ;
  jint *jarr8 ;
  jint *jarr9 ;
  jint *jarr10 ;
  jint *jarr11 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, (int **)&arg4, jarg4)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr6, (int **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr7, (int **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr8, (int **)&arg8, jarg8)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr9, (int **)&arg9, jarg9)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr10, (int **)&arg10, jarg10)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr11, (int **)&arg11, jarg11)) return ; 
  {
    try {
      ((DataHandler const *)arg1)->getDate(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  SWIG_JavaArrayArgoutInt(jenv, jarr4, (int *)arg4, jarg4); 
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  SWIG_JavaArrayArgoutInt(jenv, jarr6, (int *)arg6, jarg6); 
  SWIG_JavaArrayArgoutInt(jenv, jarr7, (int *)arg7, jarg7); 
  SWIG_JavaArrayArgoutInt(jenv, jarr8, (int *)arg8, jarg8); 
  SWIG_JavaArrayArgoutInt(jenv, jarr9, (int *)arg9, jarg9); 
  SWIG_JavaArrayArgoutInt(jenv, jarr10, (int *)arg10, jarg10); 
  SWIG_JavaArrayArgoutInt(jenv, jarr11, (int *)arg11, jarg11); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
  delete [] arg8; 
  delete [] arg9; 
  delete [] arg10; 
  delete [] arg11; 
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1setDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jint jarg9, jint jarg10, jint jarg11) {
  DataHandler *arg1 = (DataHandler *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (int)jarg11; 
  {
    try {
      (arg1)->setDate(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1setSignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  DataHandler *arg1 = (DataHandler *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->setSignedLong(arg2,arg3);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1setUnsignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  DataHandler *arg1 = (DataHandler *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->setUnsignedLong(arg2,arg3);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1setDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  DataHandler *arg1 = (DataHandler *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setDouble(arg2,arg3);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_DataHandler_1setString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  DataHandler *arg1 = (DataHandler *) 0 ;
  int arg2 ;
  std::wstring *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try {
      (arg1)->setString(arg2,(std::wstring const &)*arg3);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1DataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataHandler *arg1 = (DataHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataHandler **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_Image_1depthU8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Image::bitDepth result;
  
  (void)jenv;
  (void)jcls;
  result = (Image::bitDepth)Image::depthU8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_Image_1depthS8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Image::bitDepth result;
  
  (void)jenv;
  (void)jcls;
  result = (Image::bitDepth)Image::depthS8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_Image_1depthU16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Image::bitDepth result;
  
  (void)jenv;
  (void)jcls;
  result = (Image::bitDepth)Image::depthU16;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_Image_1depthS16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Image::bitDepth result;
  
  (void)jenv;
  (void)jcls;
  result = (Image::bitDepth)Image::depthS16;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_Image_1depthU32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Image::bitDepth result;
  
  (void)jenv;
  (void)jcls;
  result = (Image::bitDepth)Image::depthU32;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_Image_1depthS32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Image::bitDepth result;
  
  (void)jenv;
  (void)jcls;
  result = (Image::bitDepth)Image::depthS32;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_Image_1endOfDepths_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Image::bitDepth result;
  
  (void)jenv;
  (void)jcls;
  result = (Image::bitDepth)Image::endOfDepths;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1Image_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Image *)new Image();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1Image_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Image *arg1 = 0 ;
  Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Image **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Image const & reference is null");
    return 0;
  } 
  {
    try {
      result = (Image *)new Image((Image const &)*arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_Image_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Image *arg1 = (Image *) 0 ;
  Image *arg2 = 0 ;
  Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Image **)&jarg1; 
  arg2 = *(Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Image const & reference is null");
    return 0;
  } 
  {
    try {
      result = (Image *) &(arg1)->operator =((Image const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_Image_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jstring jarg5, jint jarg6) {
  jlong jresult = 0 ;
  Image *arg1 = (Image *) 0 ;
  int arg2 ;
  int arg3 ;
  Image::bitDepth arg4 ;
  std::wstring arg5 ;
  int arg6 ;
  SwigValueWrapper< DataHandler > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Image **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Image::bitDepth)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg5_pstr = jenv->GetStringChars(jarg5, 0);
  if (!arg5_pstr) return 0;
  jsize arg5_len = jenv->GetStringLength(jarg5);
  if (arg5_len) {
    (&arg5)->reserve(arg5_len);
    for (jsize i = 0; i < arg5_len; ++i) {
      (&arg5)->push_back((wchar_t)arg5_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg5, arg5_pstr);
  
  arg6 = (int)jarg6; 
  {
    try {
      result = (arg1)->create(arg2,arg3,arg4,arg5,arg6);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DataHandler **)&jresult = new DataHandler((const DataHandler &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_Image_1setHighBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Image *arg1 = (Image *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Image **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setHighBit(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_dicom_imebraJNI_Image_1getSizeMmY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Image *arg1 = (Image *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Image **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getSizeMmY();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_dicom_imebraJNI_Image_1getSizeMmX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Image *arg1 = (Image *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Image **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getSizeMmX();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_Image_1setSizeMm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  Image *arg1 = (Image *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Image **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setSizeMm(arg2,arg3);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_Image_1getSizeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Image *arg1 = (Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Image **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getSizeX();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_Image_1getSizeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Image *arg1 = (Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Image **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getSizeY();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_Image_1getDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  Image *arg1 = (Image *) 0 ;
  bool arg2 ;
  SwigValueWrapper< DataHandler > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Image **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (arg1)->getDataHandler(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DataHandler **)&jresult = new DataHandler((const DataHandler &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_dicom_imebraJNI_Image_1getColorSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Image *arg1 = (Image *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Image **)&jarg1; 
  {
    try {
      result = (arg1)->getColorSpace();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_Image_1getChannelsNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Image *arg1 = (Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Image **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getChannelsNumber();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_Image_1getDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Image *arg1 = (Image *) 0 ;
  Image::bitDepth result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Image **)&jarg1; 
  {
    try {
      result = (Image::bitDepth)(arg1)->getDepth();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_Image_1getHighBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Image *arg1 = (Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Image **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getHighBit();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1Image(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Image *arg1 = (Image *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Image **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1Transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Transform *arg1 = 0 ;
  Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Transform **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Transform const & reference is null");
    return 0;
  } 
  {
    try {
      result = (Transform *)new Transform((Transform const &)*arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_Transform_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Transform *arg1 = (Transform *) 0 ;
  Transform *arg2 = 0 ;
  Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Transform **)&jarg1; 
  arg2 = *(Transform **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Transform const & reference is null");
    return 0;
  } 
  {
    try {
      result = (Transform *) &(arg1)->operator =((Transform const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1Transform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Transform *arg1 = (Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Transform **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_dicom_imebraJNI_Transform_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Transform *arg1 = (Transform *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Transform **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isEmpty();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_Transform_1allocateOutputImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  Transform *arg1 = (Transform *) 0 ;
  Image *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  Image result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Transform **)&jarg1; 
  arg2 = *(Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Image & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (arg1)->allocateOutputImage(*arg2,arg3,arg4);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Image **)&jresult = new Image((const Image &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_Transform_1runTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jint jarg8, jint jarg9) {
  Transform *arg1 = (Transform *) 0 ;
  Image *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Image *arg7 = 0 ;
  int arg8 ;
  int arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  arg1 = *(Transform **)&jarg1; 
  arg2 = *(Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Image const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(Image **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Image & reference is null");
    return ;
  } 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  {
    try {
      (arg1)->runTransform((Image const &)*arg2,arg3,arg4,arg5,arg6,*arg7,arg8,arg9);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1TransformsChain(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TransformsChain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (TransformsChain *)new TransformsChain();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(TransformsChain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_TransformsChain_1addTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TransformsChain *arg1 = (TransformsChain *) 0 ;
  Transform *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TransformsChain **)&jarg1; 
  arg2 = *(Transform **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Transform const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->addTransform((Transform const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1TransformsChain(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TransformsChain *arg1 = (TransformsChain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TransformsChain **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_dicom_imebraJNI_ColorTransformsFactory_1normalizeColorSpace(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::wstring arg1 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  if (arg1_len) {
    (&arg1)->reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      (&arg1)->push_back((wchar_t)arg1_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  {
    try {
      result = ColorTransformsFactory::normalizeColorSpace(arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_dicom_imebraJNI_ColorTransformsFactory_1isMonochrome(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::wstring arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  if (arg1_len) {
    (&arg1)->reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      (&arg1)->push_back((wchar_t)arg1_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  {
    try {
      result = (bool)ColorTransformsFactory::isMonochrome(arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_dicom_imebraJNI_ColorTransformsFactory_1isSubsampledX(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::wstring arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  if (arg1_len) {
    (&arg1)->reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      (&arg1)->push_back((wchar_t)arg1_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  {
    try {
      result = (bool)ColorTransformsFactory::isSubsampledX(arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_dicom_imebraJNI_ColorTransformsFactory_1isSubsampledY(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::wstring arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  if (arg1_len) {
    (&arg1)->reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      (&arg1)->push_back((wchar_t)arg1_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  {
    try {
      result = (bool)ColorTransformsFactory::isSubsampledY(arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_dicom_imebraJNI_ColorTransformsFactory_1canSubsample(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::wstring arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  if (arg1_len) {
    (&arg1)->reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      (&arg1)->push_back((wchar_t)arg1_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  {
    try {
      result = (bool)ColorTransformsFactory::canSubsample(arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_dicom_imebraJNI_ColorTransformsFactory_1makeSubsampled(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  std::wstring arg1 ;
  bool arg2 ;
  bool arg3 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  if (arg1_len) {
    (&arg1)->reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      (&arg1)->push_back((wchar_t)arg1_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = ColorTransformsFactory::makeSubsampled(arg1,arg2,arg3);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_ColorTransformsFactory_1getNumberOfChannels(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::wstring arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  if (arg1_len) {
    (&arg1)->reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      (&arg1)->push_back((wchar_t)arg1_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  {
    try {
      result = (int)ColorTransformsFactory::getNumberOfChannels(arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_ColorTransformsFactory_1getTransform(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::wstring arg1 ;
  std::wstring arg2 ;
  SwigValueWrapper< Transform > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  if (arg1_len) {
    (&arg1)->reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      (&arg1)->push_back((wchar_t)arg1_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    (&arg2)->reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      (&arg2)->push_back((wchar_t)arg2_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = ColorTransformsFactory::getTransform(arg1,arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Transform **)&jresult = new Transform((const Transform &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1ColorTransformsFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ColorTransformsFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (ColorTransformsFactory *)new ColorTransformsFactory();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(ColorTransformsFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1ColorTransformsFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ColorTransformsFactory *arg1 = (ColorTransformsFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ColorTransformsFactory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1ModalityVOILUT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataSet *arg1 = 0 ;
  ModalityVOILUT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (ModalityVOILUT *)new ModalityVOILUT((DataSet const &)*arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(ModalityVOILUT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1ModalityVOILUT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ModalityVOILUT *arg1 = (ModalityVOILUT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ModalityVOILUT **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1VOILUT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataSet *arg1 = 0 ;
  VOILUT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (VOILUT *)new VOILUT((DataSet const &)*arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(VOILUT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_VOILUT_1getVOILUTId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  VOILUT *arg1 = (VOILUT *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VOILUT **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)(arg1)->getVOILUTId(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_dicom_imebraJNI_VOILUT_1getVOILUTDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  VOILUT *arg1 = (VOILUT *) 0 ;
  int arg2 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VOILUT **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->getVOILUTDescription(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_VOILUT_1setVOILUT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  VOILUT *arg1 = (VOILUT *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VOILUT **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setVOILUT(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_VOILUT_1applyOptimalVOI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  VOILUT *arg1 = (VOILUT *) 0 ;
  Image arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Image *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(VOILUT **)&jarg1; 
  argp2 = *(Image **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Image");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  {
    try {
      (arg1)->applyOptimalVOI(arg2,arg3,arg4,arg5,arg6);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_VOILUT_1setCenterWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  VOILUT *arg1 = (VOILUT *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VOILUT **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->setCenterWidth(arg2,arg3);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_VOILUT_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  VOILUT *arg1 = (VOILUT *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VOILUT **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getCenter();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_VOILUT_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  VOILUT *arg1 = (VOILUT *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VOILUT **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getWidth();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1VOILUT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VOILUT *arg1 = (VOILUT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VOILUT **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1Memory_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Memory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Memory *)new Memory();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Memory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1Memory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  Memory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (Memory *)new Memory(arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Memory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_Memory_1transfer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Memory *arg1 = (Memory *) 0 ;
  Memory *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Memory **)&jarg1; 
  arg2 = *(Memory **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Memory & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->transfer(*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_Memory_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Memory *arg1 = (Memory *) 0 ;
  Memory *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Memory **)&jarg1; 
  arg2 = *(Memory **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Memory & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom(*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_Memory_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Memory *arg1 = (Memory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Memory **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_Memory_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Memory *arg1 = (Memory *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Memory **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_Memory_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Memory *arg1 = (Memory *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Memory **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_Memory_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Memory *arg1 = (Memory *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Memory **)&jarg1; 
  {
    try {
      result = (int)(arg1)->size();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_Memory_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  Memory *arg1 = (Memory *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Memory **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
    arg3 = (size_t) jenv->GetArrayLength(jarg2);
  }
  {
    try {
      result = (arg1)->data(arg2,arg3);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_Memory_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  Memory *arg1 = (Memory *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Memory **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
    arg3 = (size_t) jenv->GetArrayLength(jarg2);
  }
  {
    try {
      (arg1)->assign(arg2,arg3);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_dicom_imebraJNI_Memory_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Memory *arg1 = (Memory *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Memory **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->empty();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1Memory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Memory *arg1 = (Memory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Memory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_MemoryPool_1flush(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try {
      MemoryPool::flush();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1MemoryPool(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MemoryPool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (MemoryPool *)new MemoryPool();
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(MemoryPool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1MemoryPool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MemoryPool *arg1 = (MemoryPool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MemoryPool **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1DrawBitmap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DrawBitmap *arg1 = 0 ;
  DrawBitmap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrawBitmap **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DrawBitmap const & reference is null");
    return 0;
  } 
  {
    try {
      result = (DrawBitmap *)new DrawBitmap((DrawBitmap const &)*arg1);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DrawBitmap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_new_1DrawBitmap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Image *arg1 = 0 ;
  TransformsChain *arg2 = 0 ;
  DrawBitmap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Image **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Image const & reference is null");
    return 0;
  } 
  arg2 = *(TransformsChain **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TransformsChain const & reference is null");
    return 0;
  } 
  {
    try {
      result = (DrawBitmap *)new DrawBitmap((Image const &)*arg1,(TransformsChain const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DrawBitmap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DrawBitmap_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  DrawBitmap *arg1 = (DrawBitmap *) 0 ;
  DrawBitmap *arg2 = 0 ;
  DrawBitmap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DrawBitmap **)&jarg1; 
  arg2 = *(DrawBitmap **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DrawBitmap const & reference is null");
    return 0;
  } 
  {
    try {
      result = (DrawBitmap *) &(arg1)->operator =((DrawBitmap const &)*arg2);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(DrawBitmap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_dicom_imebraJNI_DrawBitmap_1getBitmap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jintArray jarg8, jint jarg9) {
  jint jresult = 0 ;
  DrawBitmap *arg1 = (DrawBitmap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  int arg9 ;
  jint *jarr8 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DrawBitmap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr8, (int **)&arg8, jarg8)) return 0; 
  arg9 = (int)jarg9; 
  {
    try {
      result = (int)(arg1)->getBitmap(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr8, (int *)arg8, jarg8); 
  delete [] arg8; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_DrawBitmap_1getBitmap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  DrawBitmap *arg1 = (DrawBitmap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  Memory arg8 ;
  Memory *argp8 ;
  Memory result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(DrawBitmap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = *(Memory **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Memory");
    return 0;
  }
  arg8 = *argp8; 
  {
    try {
      result = (arg1)->getBitmap(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return 0; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return 0; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return 0; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return 0; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return 0; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return 0; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return 0; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return 0; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return 0; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return 0; 
      };
    }
  }
  *(Memory **)&jresult = new Memory((const Memory &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_dicom_imebraJNI_delete_1DrawBitmap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DrawBitmap *arg1 = (DrawBitmap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DrawBitmap **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(puntoexe::streamExceptionOpen) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot be opened"); return ; 
      };
    } catch(puntoexe::streamExceptionRead) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while reading the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionWrite) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Error while writing the stream"); return ; 
      };
    } catch(puntoexe::streamExceptionClose) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "The stream cannot closed"); return ; 
      };
    } catch(puntoexe::streamException) {
      {
        SWIG_JavaException(jenv, SWIG_IOError, "Unknown I/O error"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionDifferentFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The dataset already contains an image in a different format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionUnknownTransferSyntax) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown Transfer Syntax"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionWrongFrame) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The frames must be stored in ordered sequence"); return ; 
      };
    } catch(puntoexe::imebra::dataSetExceptionOldFormat) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Imebra cannot save in old dicom format"); return ; 
      };
    } catch(puntoexe::imebra::dataSetImageDoesntExist) {
      {
        SWIG_JavaException(jenv, SWIG_IndexError, "The requested frame doesn't exist"); return ; 
      };
    } catch(puntoexe::imebra::dataSetCorruptedOffsetTable) {
      {
        SWIG_JavaException(jenv, SWIG_AttributeError, "The dataset offset table is corrupted"); return ; 
      };
    } catch(puntoexe::imebra::dataSetException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown dataset related error"); return ; 
      };
      
    } catch(puntoexe::imebra::dicomDirCircularReferenceException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir structure contains a circular reference"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirUnknownDirectoryRecordType) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "The DicomDir record type is unknown"); return ; 
      };
    } catch(puntoexe::imebra::dicomDirException) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Unknown DicomDir related error"); return ; 
      };
    } catch(std::runtime_error) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown runtime error"); return ; 
      };
    } catch(std::logic_error) {
      {
        SWIG_JavaException(jenv, SWIG_NullReferenceError, "Null reference"); return ; 
      };
    } catch(std::exception) {
      {
        SWIG_JavaException(jenv, SWIG_UnknownError, "Unknown error"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_Stream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseStream **)&baseptr = *(Stream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_TransformsChain_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Transform **)&baseptr = *(TransformsChain **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_ModalityVOILUT_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Transform **)&baseptr = *(ModalityVOILUT **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_dicom_imebraJNI_VOILUT_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Transform **)&baseptr = *(VOILUT **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

